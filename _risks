#compdef _risks risks 
#autoload

# Entrypoint ================================================================================== 

_risks() 
{
    local cmd
    if (( CURRENT > 2 )); then
        cmd=${words[2]}
        # Set the context for the subcommand
        curcontext="${curcontext%:*:*}:risks-$cmd"
        # Narrow the range of words we are looking at to exclude `risks`
        (( CURRENT-- ))
        shift words
        # Run the completion for the subcommand
        case "${cmd}" in
            (help)      _help ;;
            (hush)      _hush ;;
            (backup)    _backup ;;
            (list)      _store_types ;;
            (load)      _load ;;
            (save)      _save ;;
            (kv)        _kv ;;
            (config)    _config ;;
            (resolve)   _resolve ;;
            (ssh)       _ssh ;;
            (gpg)       _gpg ;;
            (identity)  _identity ;;
            (tomb)      _tomb ;;
        esac
    else
        local ret=1
        local line state
        _arguments -C \
            "${_flags_base[@]}" \
            '(- : *)'--version'[Print risks version and exit]' \
            "1: :_risks_commands" \
            && ret=0
    fi
}

# Subcomands ==================================================================================

# Completes subcommands of the risks CLI.
_risks_commands ()
{
    local -a subcmds
    subcmds=(
        'help:Show help about a command'
        'hush:Format or manage the hush partition mount points and read/write permissions'
        'backup:Create, manage, restore or use backup devices and partitions'
        'list:Show currently open data stores'
        'slam:Close all active identities and unmount hush/backup partitions'
        'load:Copy some resource to a VM where to use it (completed)'
        'save:Move some data coming from another VM to a (tomb) directory'
        'kv:Manage the small key=value store used by other commands/functions'
        'config:Manage the global risk configuration settings from the CLI'
        'resolve:Retrieve the encrypted names of identity files'
        'ssh:Manage SSH-related credentials and settings'
        'gpg:Manage GPG coffings, keys, passwords and settings'
        'identity:Create, use and manage identities'
        'tomb:Create, use and manage tombs (stores)'
    )

    _describe -t commands 'commands' subcmds
}

# Completion dispatcher for help command.
_help ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_risks_commands" && ret=0
}

# Completes the commands for config
_config_commands ()
{
    local -a subcmds 
    subcmds=(
        'set:Set a key in the configuration file'
        'unset:Unset a key in the configuration file (becomes empty)'
        'get:Show the value of a key in the configuration'
        'list:Show all keys in the configuration'
    )

    _describe -t commands 'config commands' subcmds && ret=0
}

# Completion dispatcher for config subcommand
_config ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_config_commands" \
        "*::arg:->args" \
        && ret=0

    # And depending on the kv subcommand entered, complete accordingly
    case $state in
        args)
            case $line[1] in
            set)
                _arguments -C "1:key:_config_keys" \
                "2:value:" \
                && ret=0 
            ;;
            get|unset)
                _arguments -C "1:key:_config_keys" && ret=0 # TODO complete existing keys ?"
            ;;
            esac
    esac
}

# Completes the commands for hush, without parameters
_hush_commands () 
{
    local -a hushcmds 
    hushcmds=(
        'format:Format a drive for storing identity secrets (GPG/coffin/age keys)'
        'status:Print the status of the hush device (mount points, etc)'
        'mount:Mount the hush drive'
        'umount:Unmount the hush drive'
        'rw:Set read-write permissions on the hush partition'
        'ro:Set read-only permissions on the hush partition'
    )

    _describe -t commands 'hush commands' hushcmds && ret=0
}

# Completion dispatcher for hush subcommand
_hush ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "1: :_hush_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
            format)
                _arguments \
                    {-S,--size-percent}'[Size of encrypted partition, as a percentage of the entire drive]':'percentage of drive': \
                    {-A,--size-absolute}'[Size of encrypted partition, in absolute terms, WITH unit (eg. 100G, 20M)]':'absolute size with unit (eg. 20M)': \
                    '1:path to hush drive:_path_files -W /dev -g "xvd*" -F exclude_devices -P /dev/' \
                    && ret=0
                ;;
            esac
    esac
}

# Completes the commands for backup, without parameters
_backup_commands () 
{
    local -a subcmds 
    subcmds=(
        "mount:Mount the backup partition/device"
        "umount:Unmount the current backup drive"
        "format:Format and setup a drive for as a risks backup medium"
        "identity:Backup the graveyard and the GPG coffin file for the current identity, active or specified."
        "hush:Backup only the raw hush device image"
        "unlock:Unlock encryption on the backup of an identity"
        "lock:Lock encryption on the backup of an identity"
        "status:Print the status of the backup (mount points, locks, etc)"
    )

    _describe -t commands 'backup commands' subcmds && ret=0
}

# Completion dispatcher for backup subcommand
_backup ()
{
    local ret=1
    local line state

    # Register subcommands and argument patterns
    _arguments -C \
        "1: :_backup_commands" \
        "*::arg:->args" \
        && ret=0

    # Arguments completion
    case $state in
        args)
            case $line[1] in
            format|mount)
                _arguments \
                    '1:path to backup drive:_path_files -W /dev -g "xvd*" -F exclude_devices -P /dev/' \
                    && ret=0
                ;;
            unlock)
                _message "Identity owning the backup"
                ;;
            esac
    esac
}

# Completion for kv command (key=value store)]
_kv ()
{
    local ret=1

    # Subcommands of the kv command are the first "positional argument"
    function _kv_subcmds {
        local -a subcmds
        subcmds=(
            'set:Set a variable to a value'
            'get:Get the value of a variable'
            'unset:Unset an existing variable'
            'list:List all key=value pairs in the store'
            'clean:Delete all key=value pairs in the store'
        )

        _describe -t commands 'key:value store commands' subcmds && ret=0
    }

    # Start checking/proposing for subcommands/arguments
    local line state
    _arguments -C \
        "1: :_kv_subcmds" \
        "*::arg:->args" \
        && ret=0

    # And depending on the kv subcommand entered, complete accordingly
    case $state in
        args)
            case $line[1] in
            set)
                _arguments -C "1:key:" "2:variable:" && ret=0 # TODO complete existing keys ?"
            ;;
            get|unset)
                _arguments -C "1:key:" && ret=0 # TODO complete existing keys ?"
            ;;
            esac
    esac
}

# Completions for load command
_load ()
{
    _arguments \
        {-c,--close-tomb}'[Immediately close the tomb after sending the files]' \
        '1:tomb name (resource):_open_stores' \
        '2:destination VM:' \
        '3::identity name (optional if active):'
}

# Completions for the save command
_save ()
{
    _arguments \
        {-c,--close-tomb}'[Immediately close the tomb after saving the files]' \
        '1:source VM:($(ls ~/QubesIncoming))' \
        '2:tomb name (resource):_open_stores' \
        '3::identity name (optional if active):'
}

# Completes the commands for resolve, without parameters
_resolve_commands () 
{
    local -a subcmds 
    subcmds=(
        "coffin:Get the name of the gpg coffin for an identity"
        "tomb:Get the filename of a tomb file"
        "key:Get the filename of a tomb key"
    )

    _describe -t commands 'resolve commands' subcmds && ret=0
}

# Completion dispatcher for resolve subcommand
_resolve ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_resolve_commands" \
        "2::arg:->args" \
        && ret=0

    case $state in
        args)
            case $line[1] in
            coffin)
                _message "identity name"
                ;;
            tomb|key)
                _message "tomb name"
                ;;
            esac
    esac
}

# Completes the commands for gpg, without parameters
_gpg_commands () 
{
    local -a subcmds 
    subcmds=(
        "generate:Generate a new GPG subkey and add it to the keyring"
        "open:Open the GPG keyring of an identity"
        "close:Close the active identity GPG keyring"
        "import:Import the GPG private key from the backup to the GPG keyring, in read-write mode"
        "remove:Remove the GPG private key from the keyring, and set the hush in read-only mode"
        "pass:Copy the identity GPG passphrase to the clipboard"
    )

    _describe -t commands 'gpg commands' subcmds && ret=0
}

# Completion dispatcher for gpg subcommand
_gpg ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_gpg_commands" \
        "*::arg:->args" \
        && ret=0

    case $state in
        args)
            case $line[1] in
            generate)
                _gpg_generate
                ;;
            open)
                _message "identity name"
                ;;
            import)
                _arguments \
                    '1:Identity owning the backup private key:' \
                    && ret=0
                ;;
            pass)
                _arguments \
                    {-t,--timeout}'[Clear the clipboard after this many seconds]':'clipboard wipe timeout (in seconds)': \
                    '1::identity name (optional if active):'
            esac
    esac
}

# Completion for GPG subkey generation command
_gpg_generate ()
{
    _arguments -C \
        '(-S --sign)'{-S,--sign}'[If generated key is a GPG subkey, add sign capability]' \
        '(-E --encrypt)'{-E,--encrypt}'[If generated key is a GPG subkey, add encrypt capability]' \
        "1::arg:->args" \
        "2:arg:->duration" \
        && ret=0

    case $state in
        args)
            _alternative "algorithms:key algorithm (default ed25519):((rsa dsa elg ecdsa ed25519))"
            ;;
        duration)
            _message "quoted, human readable expiry duration for GPG keys (empty: no expiry)" 
            ;;
    esac
}

# Completes the commands for ssh, without parameters
_ssh_commands () 
{
    local -a subcmds 
    subcmds=(
        "generate:Generate a new SSH key and add it to the keyring"
    )

    _describe -t commands 'ssh commands' subcmds && ret=0
}

# Completion dispatcher for ssh subcommand
_ssh () 
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_ssh_commands" \
        "*::arg:->args" \
        && ret=0

    case $state in
        args)
            case $line[1] in
            generate)
                _ssh_generate
                ;;
            esac
    esac
}

# Completion dispatcher for ssh subcommand
_ssh_generate ()
{
    local ret=1
    local line state
    _arguments -C \
        '(-b --bits)'{-b,--bits}'[Key size in bits]:key size in bits:' \
        '(-f --filename)'{-f,--filename}'[Filename to use for keys]:key filename:' \
        "1::arg:->args" \
        && ret=0

    case $state in
        args)
            _alternative "algorithms:key algorithm (default ed25519):((rsa dsa ecdsa ed25519))"
    esac
}

# Completes the commands for identity, without parameters
_identity_commands () 
{
    local -a subcmds 
    subcmds=(
        "create:Create a new GPG identity, with SSH/password-store/management and associated tombs"
        "open:Open an identity GPG keyring and builtin tomb stores (SSH/pass/mgmt)"
        "close:Close all open tombs and GPG keyring of the active identity"
        "delete:Delete an identity GPG keyring, tomb stores and backup"
        "backup:Backup identity graveyard and GPG coffin (alias for 'risks backup identity')"
    )

    _describe -t commands 'identity commands' subcmds && ret=0
}

# Completion dispatcher for identity subcommand
_identity ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_identity_commands" \
        "*::arg:->args" \
        && ret=0

    case $state in
        args)
            case $line[1] in
            create)
                _identity_create
                ;;
            open)
                _message "identity name"
                ;;
            delete)
                _arguments -C \
                    '(-b --backup)'{-b,--backup}'[If a backup device is mounted, also delete all the associated backup data]' \
                    '2:identity to delete:' && ret=0
                ;;
            esac
    esac
}

# Completion for arguments needed when creating a new identity
_identity_create () 
{
    local line state
    _arguments -C \
        '(-b --backup)'{-b,--backup}'[Device file of the backup drive (whole drive without partition number, eg. /dev/sdb)]:path to backup device:_path_files -W /dev -g "xvd*" -F exclude_devices -P /dev/' \
        '(-m --mail)'{-m,--mail}'[Mail provider to use for the GPG key (appended to the name when no full mail is given as arg)]:mail provider (without @):' \
        '(-B --burner)'{-B,--burner}'[Generate a random username, and only generate GPG/Pass stores]' \
        "1: :->name" \
        "2:arg:->recipient" \
        "3:arg:->duration"

    case "$state" in
        name)
            _message "quoted string of the name, if spaces (optional if --burner)"
            ;;
        recipient)
            _message "mail address recipient to use for GPG (optional)" 
            ;;
        duration)
            _message "quoted, human readable expiry duration for GPG keys (empty: no expiry)" 
            ;;
    esac
}

# Completes the commands for tomb, without parameters
_tomb_commands () 
{
    local -a subcmds 
    subcmds=(
        "create:Create a new tomb"
        "open:Open an identity tomb"
        "close:Close an identity tomb"
        "delete:Delete an identity tomb, and optionally its backup"
    )

    _describe -t commands 'tomb commands' subcmds && ret=0
}

# Completion dispatcher for tomb subcommand
_tomb ()
{
    local ret=1
    local line state
    _arguments -C \
        "1: :_tomb_commands" \
        "*::arg:->args" \
        && ret=0

    case $state in
        args)
            case $line[1] in
            create)
                _tomb_create
                ;;
            open|delete)
                _builtin_stores 
                ;;
            close)
                _open_stores
                ;;
            delete)
                _arguments -C \
                    '(-b --backup)'{-b,--backup}'[If a backup device is mounted, also delete all the associated backup data]' \
                    '1:label of tomb to delete:' && ret=0
                ;;
            esac
    esac
}

# Completion for arguments needed when creating a new tomb
_tomb_create () 
{
    local line state
    _arguments -C \
        "1: :->name" \
        "2: :->size" \
        "3:: :->identity"

    case "$state" in
        name)
            _message "Name of tomb to use" 
            ;;
        size)
            _message "Tomb size in MB" 
            ;;
        identity)
            _message "Optional, identity to use instead of the active one"
            ;;
    esac
}


# Flags =======================================================================================

# Flags that are present on all commands
_flags_base=(
    '(-v --verbose)'{-v,--verbose}'[Enable verbose logging]'
    '(- : *)'{-h,--help}'[Print help for the command]'
    )


# Command arguments ===========================================================================

# A list of device files that are not considered when completing device paths.
exclude_devices=( 'xvda*' 'xvdb*' 'xvdc*' 'xvdd*' )

# Completes paths to devices that can be used as hush or backup devices/partitions
_devices ()
{
    _path_files -W /dev -g "xvd*" -F exclude_dirs -P /dev/
}

# Completes a list of possible store types (eg. coffin/tomb, etc)
_store_types ()
{
    _arguments -C '1:data stores:(coffins tombs)' && ret=0
}

# Completes all stores created by default with an identity, which have
# generally known and non-standard mount paths
_builtin_stores ()
{
    _alternative 'builtin_stores:builtin stores:(( \
        mgmt\:"Management tomb" \
        pass\:"Password-store tomb" \
        ssh\:"SSH keys tomb" \
        ))'
}

# Completes open builtin stores, and detected stores through grepping tomb list mounts
_open_stores ()
{
    # First add builtins
    _builtin_stores

    # Then add the detected ones under another group heading
    local exclude_builtins="mgmt|password-store|ssh"

    local -a tombs_mounts tomb_names
    tombs_mounts=$(tomb list 2>&1 \
        | sed -n '1~4p' \
        | awk -F" " '{print $(6)}' \
        | grep -Ev "($exclude_builtins)")

    if [[ $tombs_mounts == "any" ]]; then
        return
    fi

    for tomb in "${tombs_mounts[@]}" ; do
        if [[ -n $tomb ]]; then
            tomb_names+=($(basename ${tomb}))
        fi
    done

    _alternative "open_tombs:other open tombs:(${tomb_names[@]})"
}

# Returns the keys found in the risk global configuration
_config_keys ()
{
    local keys
    keys=( $(risks config keys) )
    _arguments -C "1:configuration keys:($keys)"
}

# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_risks" ]; then
        _risks
fi
